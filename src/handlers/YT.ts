import { AsyncNedb } from "nedb-async";
import {
  PendleYieldTokenContext,
  RedeemInterestEvent,
  TransferEvent,
} from "../types/eth/pendleyieldtoken.js";
import { updatePoints } from "../points/point-manager.js";
import { MISC_CONSTS } from "../consts.js";
import { getUnixTimestamp } from "../helper.js";

/**
 * @dev 1 YT EZETH is entitled to yields and points generated by 1 ETH worth of EZETH (0.997... something)
 */

const db = new AsyncNedb({
  filename: "/data/pendle-accounts-yt.db",
  autoload: true,
});

type AccountSnapshot = {
  _id: string;
  lastUpdatedAt: number;
  lastImpliedHolding: string;
};

export async function handleYTTransfer(
  evt: TransferEvent,
  ctx: PendleYieldTokenContext
) {
  await processAccount(evt.args.from, ctx);
  await processAccount(evt.args.to, ctx);
}

export async function handleYTRedeemInterest(
  evt: RedeemInterestEvent,
  ctx: PendleYieldTokenContext
) {
  await processAccount(evt.args.user, ctx);
}

export async function processAllYTAccounts(ctx: PendleYieldTokenContext) {
  const accountSnapshots = await db.asyncFind<AccountSnapshot>({});
  for (const snapshot of accountSnapshots) {
    await processAccount(snapshot._id, ctx);
  }
}

async function processAccount(account: string, ctx: PendleYieldTokenContext) {
  if (account == MISC_CONSTS.ZERO_ADDRESS) {
    return;
  }
  const timestamp = getUnixTimestamp(ctx.timestamp);

  const snapshot = await db.asyncFindOne<AccountSnapshot>({ _id: account });
  if (snapshot && snapshot.lastUpdatedAt < timestamp) {
    updatePoints(
      ctx,
      "YT",
      account,
      BigInt(snapshot.lastImpliedHolding),
      BigInt(timestamp - snapshot.lastUpdatedAt),
      timestamp
    );
  }

  const interestData = await ctx.contract.userInterest(account);

  if (interestData.lastPYIndex == 0n) {
    // must be YT
    return;
  }

  const balance = await ctx.contract.balanceOf(account);
  const impliedHolding =
    (balance * MISC_CONSTS.ONE_E18) / interestData.lastPYIndex +
    interestData.accruedInterest;

  const newSnapshot = {
    _id: account,
    lastUpdatedAt: timestamp,
    lastImpliedHolding: impliedHolding.toString(),
  };

  await db.asyncUpdate({ _id: account }, newSnapshot, { upsert: true });
}
